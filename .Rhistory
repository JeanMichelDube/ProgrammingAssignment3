View(finalTable)
View(selectState)
View(secondTable)
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
findRank <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
if (is.element(as.character(state),data$State)>0) {selectState <- data[data$State == state, ]} else {stop("invalid state")}
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
out
}
state=list("NY","TX")
lapply(state,findRank(state,"heart attack",2))
state="NY"
lapply(state,findRank(state,"heart attack",2))
findRank("NY","heart attack",2)
findRank("TX","heart attack",2)
sapply(state,findRank(state,"heart attack",2))
findRank <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
out
}
findRank("TX","heart attack",2)
findRank("NY","heart attack",2)
lapply(state,findRank(state,"heart attack",2))
findRank <- function(state, outcome, num = "best") {
state = out
out
}
findRank("NY","heart attack",2)
findRank <- function(state, outcome, num = "best") {
out = state
out
}
findRank("NY","heart attack",2)
lapply(state,findRank(state,"heart attack",2))
findRank <- function(state, outcome, num = "best") {
out = state
return(out)
}
lapply(state,findRank(state,"heart attack",2))
findRank("NY","heart attack",2)
lapply(state,findRank(state,"heart attack",2) state)
lapply(state,findRank(state,"heart attack",2) state%%10)
lapply(state,findRank(state,"heart attack",2) print(out))
lapply(state,findRank(state,"heart attack",2) print(state))
x=lapply(state,findRank(state,"heart attack",2))
state=list("NY","TX")
x=lapply(state,findRank(state,"heart attack",2))
x=lapply(state,findRank state)
x=lapply(state,findRank)
findRank <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
out
}
outputfonction = lapply(state,findRank,o=o,num=num)
o=11
num=2
outputfonction = lapply(state,findRank,o=o,num=num)
findRank <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
return(out)
}
outputfonction = lapply(state,findRank,o=o,num=num)
outputfonction = lapply(state,findRank,o="heart attack",num=num)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(state,findRank,o=o,num=num))
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(state,findRank,o=o,num=num))
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(state,findRank,o=o,num=num))
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(state,findRank,o=o,num=num))
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(state,findRank,o=o,num=num))
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(state,findRank,o=o,num=num))
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(as.character(state),findRank,o=o,num=num)
outputfonction
## Return a data frame with the hospital names and the
#do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall("heart attack",1)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(as.character(state),findRank,o=o,num=num)
## Return a data frame with the hospital names and the
do.call(rbind,outputfonction)
## (abbreviated) state name
}
rankall("heart attack",1)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(as.character(state),findRank,o=o,num=num)
## Return a data frame with the hospital names and the
result=do.call(rbind,outputfonction)
## (abbreviated) state name
final=cbind(state,result)
final
}
rankall("heart attack",1)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
if (length(cutNa)<num) {out = NA} else {
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(as.character(state),findRank,o=o,num=num)
## Return a data frame with the hospital names and the
result=do.call(rbind,outputfonction)
## (abbreviated) state name
final=cbind(result,state)
final
}
rankall("heart attack",1)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall("pneumonia", "worst")
rankall("heart attack", "worst")
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(as.character(state),findRank,o=o,num=num)
## Return a data frame with the hospital names and the
result=do.call(rbind,outputfonction)
## (abbreviated) state name
final=cbind(result,state)
final
}
rankall("heart attack", "worst")
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
state = as.character(unique(data$State))
## Check that state and outcome are valid
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
findRank <- function(state, o, num = "best") {
#if number est plus grand que length, retourner NA
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
selectState <- data[data$State == state, ]
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
out
}
## For each state, find the hospital of the given rank
outputfonction = lapply(as.character(state),findRank,o=o,num=num)
## Return a data frame with the hospital names and the
result=do.call(rbind,outputfonction)
## (abbreviated) state name
final=cbind(result,state)
superfinal=final[order(final[,2]),]
superfinal
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
if (is.element(as.character(state),data$State)>0) {selectState <- data[data$State == state, ]} else {stop("invalid state")}
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
## Return hospital name in that state with lowest 30-day death rate
m=suppressWarnings(na.omit(as.numeric(selectState[,o])))
s <- suppressWarnings(subset(selectState,as.numeric(selectState[,o])==min(m),Hospital.Name))
sort(s$Hospital.Name)
as.character(s[1,1])
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
if (is.element(as.character(state),data$State)>0) {selectState <- data[data$State == state, ]} else {stop("invalid state")}
if (outcome == "heart attack"){o=11} else if (outcome == "heart failure") {o=17} else if (outcome == "pneumonia") {o=23} else {stop("invalid outcome")}
## Return hospital name in that state with the given rank
cutNa=subset(selectState,suppressWarnings(is.na(as.numeric(selectState[,o]))==FALSE))
secondTable = cutNa[order (cutNa[,2]),]
finalTable = secondTable[order (as.numeric(secondTable[,o])),]
## 30-day death rate
if (num=="best") {out=finalTable[1,2]} else if (num=="worst") {out = tail(finalTable,n=1L)[1,2]} else {out = finalTable[num,2]}
out
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
View(r)
r <- rankall("pneumonia", "worst")
View(r)
r <- rankall("heart failure", 10)
View(r)
